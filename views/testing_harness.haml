#testing-harness
  %h1 Testing Harness
  %p
    Onelogin's testing harness helps you get your API diagnosis fast. You will only need the following elements:

  %ol.list
    %li Your oauth bearer token
    %li Your API's URL
    %li A YML file including the users for: create/update

  %form(action="/check_api" enctype="multipart/form-data" method="post")
    .box
      %h3 Introduce your oauth bearer token
      %p OAuth 2 bearer token is the suggested SCIM's auth strategy
      .row.gap-bottom
        = render_error_message(@api_test, :token)
        %p(class="#{ error_for?(@api_test, :token) ? 'invalid' : '' }")
          <input placeholder="Your oauth token" name='api_test[token]' value="#{@api_test.token}">
    .box
      %h3 Introduce your api BASE URL
      %p
        Base URL is the path to follow to your public api, we just add the necessary SCIM endpoints to start testing against it.
        %br
        For example, if your API endpoint for the user Resource is: https://someexample.com/api/v1/public/Users, input
        %br
        %b https://someexample.com/api/v1/public
        in the box below

      .row.gap-bottom
        = render_error_message(@api_test, :base_url)
        %p(class="#{ error_for?(@api_test, :base_url) ? 'invalid' : '' }")
          <input placeholder="Your API Base URL" name='api_test[base_url]' value="#{@api_test.base_url}">
    .box
      %h3 Introduce your fixture users
      %p
        Because different partner's systems have their own specs on what a user needs to be valid, upload here a YAML file
        containing the needed user attributes.
      %p
        The following is an example of a user Resource fixture in a YAML file.
      .box.info
        :plain
          <pre>
            create:
              userType: student
              emails:
                - {value: 'ignacio.madrid@onelogin.com', type: 'Work'}
              userName: inaki@testonelog.in
              externalId: bjensen
              name:
                familyName: 'De La Madrid'
                givenName:  'Inaki'

            update:
              name:
              familyName: 'Madrid'
              givenName:  'Ignasi A'
          </pre>
      .row.gap-bottom
        = render_error_message(@api_test, :fixtures_file)
        %p(class="#{ error_for?(@api_test, :fixtures_file) ? 'invalid' : '' }")
          <input type="file"  name='api_test[fixtures_file]'>
    %button.large.success(type='submit') Validate my API!
